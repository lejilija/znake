<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Spel</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #222; /* Mörk bakgrund */
            margin: 0;
            font-family: 'Press Start 2P', cursive; /* Arkadfont */
            color: #fff; /* Vit text */
            flex-direction: column; /* Centrera vertikalt */
        }

        #game-container {
            border: 8px solid #555; /* Mörkare grå ram */
            background-color: #000; /* Svart spelområde */
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.2); /* Ljus skugga */
            position: relative; /* För meddelanderutan */
            border-radius: 8px; /* Rundade hörn */
            overflow: hidden; /* Gömmer overflow */
            width: 400px; /* Fast bredd */
            height: 400px; /* Fast höjd */
        }

        canvas {
            display: block; /* Tar bort extra utrymme under canvas */
            width: 100%; /* Fyll container */
            height: 100%; /* Fyll container */
        }

        #score {
            margin-top: 20px;
            font-size: 1.5em;
            color: #0f0; /* Grön poängtext */
            text-shadow: 0 0 5px #0f0; /* Ljusgrön skugga */
        }

        #message-box {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(50, 50, 50, 0.85); /* Halvtransparent grå */
            color: #fff;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            font-size: 1.2em;
            display: none; /* Dold som standard */
            border: 2px solid #fff;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
            z-index: 10; /* Säkerställer att den är över canvas */
        }

        #message-box button {
            margin-top: 20px;
            padding: 10px 20px;
            font-family: 'Press Start 2P', cursive;
            font-size: 1em;
            cursor: pointer;
            background-color: #0f0; /* Grön knapp */
            color: #000; /* Svart text */
            border: none;
            border-radius: 5px;
            box-shadow: 0 4px #0a0; /* Mörkare grön skugga */
            transition: background-color 0.2s, box-shadow 0.2s, transform 0.2s;
        }

         #message-box button:active {
            background-color: #0c0; /* Lite mörkare grön vid klick */
            box-shadow: 0 2px #080; /* Mindre skugga */
            transform: translateY(2px); /* Flytta ner knappen lite */
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="gameCanvas" width="400" height="400"></canvas>
        <div id="message-box">
            <p id="message-text"></p>
            <button id="start-button">Starta</button>
        </div>
    </div>
    <div id="score">Poäng: 0</div>

    <script>
        // Hämta nödvändiga DOM-element
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const messageBox = document.getElementById('message-box');
        const messageText = document.getElementById('message-text');
        const startButton = document.getElementById('start-button');

        // Spelkonstanter och variabler
        const gridSize = 20; // Storlek på varje ruta i rutnätet (pixels)
        const canvasSize = 400; // Canvas storlek (måste matcha HTML width/height)
        const tileCount = canvasSize / gridSize; // Antal rutor på bredden/höjden
        const gameSpeed = 150; // Hastighet i millisekunder (lägre är snabbare)

        let snake = []; // Ormens kroppsdelar (array av {x, y})
        let dx = 0; // Rörelse i x-led (1: höger, -1: vänster, 0: ingen)
        let dy = 0; // Rörelse i y-led (1: ner, -1: upp, 0: ingen)
        let food = { x: 0, y: 0 }; // Matens position {x, y}
        let score = 0;
        let changingDirection = false; // Förhindrar snabba 180-graderssvängar inom samma tick
        let gameLoopTimeout; // Referens till timeout för att kunna stoppa/starta loopen
        let gameRunning = false; // Håller reda på om spelet körs

        // --- Funktioner ---

        // Ritar en rektangel (används för ormsegment och mat)
        function drawRect(x, y, color) {
            ctx.fillStyle = color;
            // x * gridSize och y * gridSize omvandlar rutnätskoordinater till pixelkoordinater
            // gridSize - 2 skapar ett litet mellanrum mellan rutorna för visuell tydlighet
            ctx.fillRect(x * gridSize, y * gridSize, gridSize - 2, gridSize - 2);
        }

        // Ritar hela ormen
        function drawSnake() {
            // Loopar igenom varje segment i 'snake'-arrayen
            snake.forEach((part, index) => {
                // Huvudet (index 0) får en ljusare färg än kroppen
                // ÄNDRING: Ändrat färger till orange
                const color = index === 0 ? '#ff9900' : '#cc6600'; // Ljusorange huvud, mörkare orange kropp
                drawRect(part.x, part.y, color);
            });
        }

        // Ritar maten
        function drawFood() {
             // ÄNDRING: Ändrat färg till grön
            drawRect(food.x, food.y, '#00ff00'); // Grön mat
        }

        // Flyttar ormen ett steg i aktuell riktning (dx, dy)
        function moveSnake() {
            // Beräkna positionen för det nya huvudet
            const head = { x: snake[0].x + dx, y: snake[0].y + dy };
            // Lägg till det nya huvudet i början av 'snake'-arrayen
            snake.unshift(head);

            // Kolla om ormen precis åt maten
            const ateFood = snake[0].x === food.x && snake[0].y === food.y;
            if (ateFood) {
                score += 10; // Öka poängen
                scoreElement.textContent = `Poäng: ${score}`; // Uppdatera poängvisningen
                placeFood(); // Placera ut ny mat på brädet
            } else {
                // Om ingen mat åts, ta bort det sista segmentet från ormens svans
                // Detta får ormen att se ut som den rör sig framåt
                snake.pop();
            }
        }

        // Placerar mat slumpmässigt på en ledig ruta
        function placeFood() {
            let newFoodPosition;
            // Loopa tills en position hittas som *inte* är upptagen av ormen
            do {
                newFoodPosition = {
                    x: Math.floor(Math.random() * tileCount), // Slumpmässig x-koordinat inom rutnätet
                    y: Math.floor(Math.random() * tileCount)  // Slumpmässig y-koordinat inom rutnätet
                };
            } while (isFoodOnSnake(newFoodPosition)); // Kolla om positionen är upptagen

            food = newFoodPosition; // Uppdatera den globala matpositionen
        }

        // Hjälpfunktion: Kollar om en given position är upptagen av något ormsegment
        function isFoodOnSnake(position) {
            // Använder array.some() för att se om *något* segment matchar positionen
            return snake.some(part => part.x === position.x && part.y === position.y);
        }

        // Hanterar tangenttryckningar för att styra ormen
        function handleKeyPress(event) {
            // Ignorera tangenttryck om spelet inte körs eller om vi redan håller på att byta riktning
            if (!gameRunning || changingDirection) return;
            changingDirection = true; // Sätt flaggan så vi inte kan byta igen direkt

            const keyPressed = event.key; // Hämta tangentens namn (t.ex. "ArrowUp")

            // Hämta nuvarande riktning för att förhindra 180-graders svängar
            const goingUp = dy === -1;
            const goingDown = dy === 1;
            const goingLeft = dx === -1;
            const goingRight = dx === 1;

            // Uppdatera dx och dy baserat på tangent, men bara om det inte är motsatt riktning
            // Tillåter både piltangenter och WASD
            if ((keyPressed === 'ArrowUp' || keyPressed.toLowerCase() === 'w') && !goingDown) {
                dx = 0; dy = -1;
            } else if ((keyPressed === 'ArrowDown' || keyPressed.toLowerCase() === 's') && !goingUp) {
                dx = 0; dy = 1;
            } else if ((keyPressed === 'ArrowLeft' || keyPressed.toLowerCase() === 'a') && !goingRight) {
                dx = -1; dy = 0;
            } else if ((keyPressed === 'ArrowRight' || keyPressed.toLowerCase() === 'd') && !goingLeft) {
                dx = 1; dy = 0;
            } else {
                 // Om ingen giltig styrknapp trycktes, återställ flaggan direkt
                 changingDirection = false;
            }
        }

        // Kollar om ormens huvud har kolliderat med väggar eller sin egen kropp
        function checkCollision() {
            const head = snake[0];

            // Väggkollision: Kolla om huvudet är utanför canvasens gränser
            if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                return true; // Kollision!
            }

            // Självkollision: Kolla om huvudet är på samma ruta som något annat kroppssegment
            // Loopar från index 1 (första kroppssegmentet) eftersom huvudet (index 0) inte kan kollidera med sig själv
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    return true; // Kollision!
                }
            }

            return false; // Ingen kollision
        }

        // Visar meddelanderutan med angiven text
        function showMessage(text) {
            messageText.textContent = text;
            messageBox.style.display = 'block'; // Gör rutan synlig
        }

        // Döljer meddelanderutan
        function hideMessage() {
            messageBox.style.display = 'none'; // Gör rutan osynlig
        }

        // Återställer spelets tillstånd till startläget
        function resetGame() {
            // Startposition för ormen (mitten av brädet)
            snake = [
                { x: Math.floor(tileCount / 2), y: Math.floor(tileCount / 2) }
            ];
            dx = 0; // Ingen initial rörelse
            dy = 0;
            score = 0; // Nollställ poängen
            scoreElement.textContent = `Poäng: ${score}`; // Uppdatera poängvisningen
            placeFood(); // Placera ut den första matbiten
            changingDirection = false;
            gameRunning = false; // Spelet är inte igång än
            clearTimeout(gameLoopTimeout); // Stoppa eventuell tidigare spellop
            // Rensa och rita startläget
            clearCanvas();
            drawSnake();
            drawFood();
        }

        // Rensa hela canvasen
        function clearCanvas() {
            ctx.fillStyle = '#000'; // Svart bakgrundsfärg
            ctx.fillRect(0, 0, canvasSize, canvasSize); // Fyll hela canvas
        }

        // Funktion som körs när spelet är över
        function gameOver() {
            gameRunning = false; // Stoppa spelet
            clearTimeout(gameLoopTimeout); // Stoppa spellopen
            showMessage(`Game Over! Poäng: ${score}`); // Visa game over-meddelande
            startButton.textContent = "Spela igen"; // Ändra knapptext
        }

        // Huvudspellopen - uppdaterar och ritar spelet
        function gameLoop() {
            if (!gameRunning) return; // Avsluta om spelet inte körs

            // Schemalägg nästa körning av gameLoop
            // Detta skapar en återkommande loop med 'gameSpeed' intervall
            gameLoopTimeout = setTimeout(() => {
                changingDirection = false; // Tillåt riktningsändring igen för nästa tick

                clearCanvas(); // Rensa canvasen före varje ny ritning
                drawFood();    // Rita maten
                moveSnake();   // Flytta ormen
                drawSnake();   // Rita ormen på dess nya position

                // Kolla efter kollision efter att ormen har flyttats
                if (checkCollision()) {
                    gameOver(); // Avsluta spelet om kollision upptäcks
                } else {
                    gameLoop(); // Fortsätt loopen om ingen kollision
                }
            }, gameSpeed);
        }

         // Startar spelet när knappen klickas
         function startGame() {
            hideMessage(); // Göm meddelanderutan
            resetGame();   // Återställ spelet (även om det är första gången)
            dx = 1; // Starta med att röra sig åt höger
            dy = 0;
            gameRunning = true; // Sätt spelet som körande
            gameLoop(); // Starta spellopen
         }

        // --- Event Listeners ---
        // Lyssna efter tangenttryckningar
        document.addEventListener('keydown', handleKeyPress);
        // Lyssna efter klick på startknappen
        startButton.addEventListener('click', startGame);

        // --- Initialisering ---
        // Körs när hela sidan har laddats
        window.onload = () => {
            resetGame(); // Förbered spelet
            showMessage("Tryck Start för att spela!"); // Visa startmeddelande
            startButton.textContent = "Starta"; // Säkerställ rätt knapptext
        };

    </script>
</body>
</html>
